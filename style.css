/* Based on youtube tutorial: https://www.youtube.com/watch?v=nME3fE3c9Qw */

/* Begin global variables */
@import url("https://fonts.googleapis.com/css2?family=Montserrat&family=Titillium+Web:wght@400;700&display=swap");

:root {
    --clr-darkgray: #111111;
    --clr-gray: #ccc7d3;
    --clr-lightgray: #dfdbe5;
    --clr-purple: #5a4d70;
    --clr-darkpurple: #5a4d70;
    --clr-white: #ffffff;
}

/* End global variables */

/* Begin General styles */

* {
    margin: 0;
    padding: 0;
}

*, *::before, *::after {
    box-sizing: border-box;
}

body {
    font-family: Monterrat, sans-serif;
}

/* End General styles */

/* Begin Typography */


/* End Typography */

/* Begin Colors */



/* End Colors */

/* Begin Structure */

/* header */

.header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    padding: 1rem 2rem;
    z-index: 1;
    backdrop-filter: blur(5px);
}

.header a {
    text-decoration: none;
    color: var(--clr-darkgray);
    font-size: 2rem;
}

.menu-items {
    list-style: none;
    display: flex;
    align-items: center;
}

.menu-items li a {
    font-size: 1rem;
    padding: .5em 1em;
    transition: background 0.3s ease-in-out color 0.3s ease-in-out;
}

.menu-items li a:hover {
    background: var(--clr-gray); 
}

/* nav menu button */
.menu-btn {
    position: relative;
    display: none;
    justify-content: center;
    align-items: center;
    width: 1.5rem;
    height: 1.5rem;
    cursor: pointer;
    z-index: 1;
}

.menu-btn__lines,
.menu-btn__lines::before,
.menu-btn__lines::after {
    width: 1.5rem;
    height: 0.1rem;
    background: var(--clr-darkgray);
    transition: all 0.5s ease-in-out;
}

.menu-btn__lines::before,
.menu-btn__lines::after {
    content: "";
    position: absolute;
}

.menu-btn__lines::before {
    transform: translateY(-0.5rem);
}
.menu-btn__lines::after {
    transform: translateY(0.5rem);
}

/* animation */
.menu-btn.open .menu-btn__lines {
    transform: translateX(2rem);
    background: transparent;
}

.menu-btn.open .menu-btn__lines::before {
    transform: rotate(45deg) translate(-1.5rem, 1.5rem);
    background-color: #ffffff;
}

.menu-btn.open .menu-btn__lines::after {
    transform: rotate(-45deg) translate(-1.5rem, -1.5rem);
    background-color: #ffffff;
}

/* sections */
.section {
    position: relative;
    /* height: 100vh; */
    padding: 15em 0;
    display: flex;
    justify-content: center;
    align-items: center;
}

/* hero section */
.hero-section {
    background: var(--clr-lightgray);
    background-image: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.1'%3E%3Cpath d='M50 50c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10s-10-4.477-10-10 4.477-10 10-10zM10 10c0-5.523 4.477-10 10-10s10 4.477 10 10-4.477 10-10 10c0 5.523-4.477 10-10 10S0 25.523 0 20s4.477-10 10-10zm10 8c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8zm40 40c4.418 0 8-3.582 8-8s-3.582-8-8-8-8 3.582-8 8 3.582 8 8 8z' /%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
}

.hero-col {
    padding: clamp(1rem, 8vw, 5rem);
    max-width: 50%;
}

.section h1 {
    font-family: 'Titillium Web', serif;
    font-size: clamp(60px, 8vw, 200px);
    /*  Tradition way of writing code like this: 
        "width: 70%; max-width: 500px; " mean that
        the width will be at 70% before 500px, but will lock after 500px.
        There are other ways of handling them.
        One is the min function that uses the smallest of two values.
        For instance width: min(500px, 70%) will resize the element based on the smallest value of the viewpoint and is equivalent to the traditional way of doing things. 
        Look at it this way:
        min(500px, 70%(Currently what is 70% of the viewpoint - answer ->
        is 350px. Is 350px smaller than 500px? Yes then use the value 70%
        Now max(500px, 70%) is the opposite. Which is larger?
        Is 70% of the current viewpoint greater than 500px? Then use 70%
        as the value and vice versa.
        With clamp() you set the minimium the middle and the maximum.
        The middle value wii be chosen as long as it is in the range of the 
        min and max. If it goes outside the range in either directions,
        it will choose min or max as it value;
        It is inadvisible to use clamp for width because of mobile issues.
        But font-size is a very good use case for it.
    */
    font-weight: 700;
    line-height: 3vw;
    color: var(--clr-gray);
    text-transform: uppercase;
}

.section h2 {
    font-size: clamp(18px, 2.5vw, 60px);
    color: var(--clr-purple);
    padding-left: 2rem;
    text-transform: uppercase;
}

.section p {
    color: var(--clr-purple);
    padding-right: 1rem;
}

.hero-section img {
    width: clamp(250px, 30vw, 500px);
    transform: scaleX(-1);
}

/* custom shape for hero section */
.custom-shape-divider {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    overflow: hidden;
}
  
.custom-shape-divider svg {
    position: relative;
    display: block;
    width: calc(100% + 1.3px);
    height: 150px;
}
  
.custom-shape-divider .shape-fill {
    fill: #ffffff;
}
  
/* another section */
.another-col {
    width: clamp(300px, 50vw, 600px);
}

/* End Structure */

/* media query for tablet devices */
@media (max-width: 1023px) {
    .custom-shape-divider svg {
      width: calc(200% + 1.3px);
      height: 150px;
    }

    .hero-col {
        max-width: 100%;
        width: clamp(300px, 50vw, 600px);
        padding: 0;
    }

    .hero-img {
        display: none;
    }
}

/* media query for mobile devices */
@media (max-width: 767px) {
    .custom-shape-divider svg {
      width: calc(250% + 1.3px);
      height: 150px;
    }

    .header a {
        font-size: 1rem;
    }

    .menu-btn {
        display: flex;
    }

    .menu-items {
        flex-direction: column;
        justify-content: space-around;
        position: absolute;
        top: 0;
        right: 0;
        left: 0;
        height: 100vh;
        transform: translateX(100vw);
        background: var(--clr-darkpurple);
        transition: transform 0.3s ease-in-out;
    }

    .menu-items.open {
        transform: translateX(0);
    }

    .menu-items li {
        width: 100vw;
        height: 100%;
    }

    .menu-items li a {
        color: var(--clr-white);
        font-size: 5vh;
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }

    .menu-items li a:hover {
        color: var(--clr-darkgray);
    }

}